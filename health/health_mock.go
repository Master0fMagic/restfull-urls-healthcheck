// Code generated by MockGen. DO NOT EDIT.
// Source: health/health.go

// Package health is a generated GoMock package.
package health

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockURLHealthCheck is a mock of URLHealthCheck interface.
type MockURLHealthCheck struct {
	ctrl     *gomock.Controller
	recorder *MockURLHealthCheckMockRecorder
}

// MockURLHealthCheckMockRecorder is the mock recorder for MockURLHealthCheck.
type MockURLHealthCheckMockRecorder struct {
	mock *MockURLHealthCheck
}

// NewMockURLHealthCheck creates a new mock instance.
func NewMockURLHealthCheck(ctrl *gomock.Controller) *MockURLHealthCheck {
	mock := &MockURLHealthCheck{ctrl: ctrl}
	mock.recorder = &MockURLHealthCheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLHealthCheck) EXPECT() *MockURLHealthCheckMockRecorder {
	return m.recorder
}

// PingUrls mocks base method.
func (m *MockURLHealthCheck) PingUrls(ctx context.Context, urls []string) (map[string]Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingUrls", ctx, urls)
	ret0, _ := ret[0].(map[string]Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingUrls indicates an expected call of PingUrls.
func (mr *MockURLHealthCheckMockRecorder) PingUrls(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingUrls", reflect.TypeOf((*MockURLHealthCheck)(nil).PingUrls), ctx, urls)
}

// MockHTTPCaller is a mock of HTTPCaller interface.
type MockHTTPCaller struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPCallerMockRecorder
}

// MockHTTPCallerMockRecorder is the mock recorder for MockHTTPCaller.
type MockHTTPCallerMockRecorder struct {
	mock *MockHTTPCaller
}

// NewMockHTTPCaller creates a new mock instance.
func NewMockHTTPCaller(ctrl *gomock.Controller) *MockHTTPCaller {
	mock := &MockHTTPCaller{ctrl: ctrl}
	mock.recorder = &MockHTTPCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPCaller) EXPECT() *MockHTTPCallerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPCaller) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPCallerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPCaller)(nil).Do), req)
}
